# type: ignore
# generated by datamodel-codegen:
#   filename:  https://api.lantmateriet.se/ogc-features/v1/administrativ-indelning/api?f=json
#   timestamp: 2025-08-23T13:40:30+00:00

from __future__ import annotations

from datetime import date
from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import AwareDatetime, BaseModel, Field, RootModel, conint


class Link(BaseModel):
    href: str
    rel: str
    type: Optional[str] = None
    title: Optional[str] = None


class ExternalDocumentation(BaseModel):
    url: str
    description: Optional[str] = None


class InstantArray(RootModel[List[AwareDatetime]]):
    root: List[AwareDatetime]


class DoubleArray(RootModel[List[float]]):
    root: List[float]


class DoubleArrayArray(RootModel[List[DoubleArray]]):
    root: List[DoubleArray]


class HtmlSchema(RootModel[str]):
    root: str = Field(..., examples=['<html>...</html>'])


class ConformanceDeclaration(BaseModel):
    conformsTo: List[str]
    description: Optional[str] = None
    title: Optional[str] = None
    links: List[Link]


class Type(Enum):
    Feature = 'Feature'


class Properties(BaseModel):
    objektidentitet: Optional[str] = Field(None, title='Objektidentitet')
    objektversion: Optional[int] = Field(None, title='Objektversion')
    versionGiltigFran: Optional[AwareDatetime] = Field(
        None, title='Version giltig från'
    )
    versionGiltigTill: Optional[AwareDatetime] = Field(
        None, title='Version giltig till'
    )
    objekttyp: Optional[str] = Field(None, title='Objekttyp')
    enhetstyp: Optional[str] = Field(None, title='Enhetstyp')
    gransstatus: Optional[str] = Field(None, title='Gränsstatus')
    lanskod: Optional[str] = Field(None, title='Länskod')
    kommunkod: Optional[str] = Field(None, title='Kommunkod')
    landskod: Optional[str] = Field(None, title='Landskod')
    hogstaForvaltningsniva: Optional[str] = Field(None, title='Högsta förvaltningsnivå')
    beslutatNamn: Optional[str] = Field(None, title='Beslutat namn')
    namnKortform: Optional[str] = Field(None, title='Namn kortform')
    landareal_varde: Optional[int] = Field(None, title='Landarealvärde')
    landareal_enhet: Optional[str] = Field(None, title='Landarealenhet')
    vattenareal_varde: Optional[int] = Field(None, title='Vattenarealvärde')
    vattenareal_enhet: Optional[str] = Field(None, title='Vattenarealenhet')
    totalareal_varde: Optional[int] = Field(None, title='Totalarealvärde')
    totalareal_enhet: Optional[str] = Field(None, title='Totalarealenhet')
    referensdatumFran: Optional[date] = Field(None, title='Referensdatum från')
    referensdatumTill: Optional[date] = Field(None, title='Referensdatum till')


class Type1(Enum):
    MultiPolygon = 'MultiPolygon'


class Coordinate(RootModel[List[float]]):
    root: List[float]


class MultipolygonGeoJSON(BaseModel):
    type: Type1
    coordinates: List[List[List[Coordinate]]]


class ConfClasses(BaseModel):
    conformsTo: List[str]


class Exception(BaseModel):
    code: str
    description: Optional[str] = None


class Crs(Enum):
    http___www_opengis_net_def_crs_OGC_1_3_CRS84 = (
        'http://www.opengis.net/def/crs/OGC/1.3/CRS84'
    )


class Spatial(BaseModel):
    bbox: Optional[List[List[float]]] = Field(
        None,
        description='One or more bounding boxes that describe the spatial extent of the dataset.\nIn the Core only a single bounding box is supported. Extensions may support\nadditional areas. If multiple areas are provided, the union of the bounding\nboxes describes the spatial extent.',
        min_length=1,
    )
    crs: Optional[Crs] = Field(
        'http://www.opengis.net/def/crs/OGC/1.3/CRS84',
        description='Coordinate reference system of the coordinates in the spatial extent\n(property `bbox`). The default reference system is WGS 84 longitude/latitude.\nIn the Core this is the only supported coordinate reference system.\nExtensions may support additional coordinate reference systems and add\nadditional enum values.',
    )


class IntervalItem(RootModel[List[AwareDatetime]]):
    root: List[AwareDatetime] = Field(
        ...,
        description='Begin and end times of the time interval. The timestamps are in the\ntemporal coordinate reference system specified in `trs`. By default\nthis is the Gregorian calendar.',
        examples=[['2011-11-11T12:22:11Z', None]],
    )


class Trs(Enum):
    http___www_opengis_net_def_uom_ISO_8601_0_Gregorian = (
        'http://www.opengis.net/def/uom/ISO-8601/0/Gregorian'
    )


class Temporal(BaseModel):
    interval: Optional[List[IntervalItem]] = Field(
        None,
        description='One or more time intervals that describe the temporal extent of the dataset.\nThe value `null` is supported and indicates an unbounded interval end.\nIn the Core only a single time interval is supported. Extensions may support\nmultiple intervals. If multiple intervals are provided, the union of the\nintervals describes the temporal extent.',
        min_length=1,
    )
    trs: Optional[Trs] = Field(
        'http://www.opengis.net/def/uom/ISO-8601/0/Gregorian',
        description='Coordinate reference system of the coordinates in the temporal extent\n(property `interval`). The default reference system is the Gregorian calendar.\nIn the Core this is the only supported temporal coordinate reference system.\nExtensions may support additional temporal coordinate reference systems and add\nadditional enum values.',
    )


class Extent(BaseModel):
    spatial: Optional[Spatial] = Field(
        None, description='The spatial extent of the features in the collection.'
    )
    temporal: Optional[Temporal] = Field(
        None, description='The temporal extent of the features in the collection.'
    )


class Type2(Enum):
    FeatureCollection = 'FeatureCollection'


class Type3(Enum):
    Feature = 'Feature'


class Type4(Enum):
    GeometryCollection = 'GeometryCollection'


class Type5(Enum):
    LineString = 'LineString'


class LinestringGeoJSON(BaseModel):
    type: Type5
    coordinates: List[Coordinate] = Field(..., min_length=2)


class LinkModel(BaseModel):
    href: str = Field(..., examples=['http://data.example.com/buildings/123'])
    rel: str = Field(..., examples=['alternate'])
    type: Optional[str] = Field(None, examples=['application/geo+json'])
    hreflang: Optional[str] = Field(None, examples=['en'])
    title: Optional[str] = Field(None, examples=['Trierer Strasse 70, 53115 Bonn'])
    length: Optional[int] = None


class Type6(Enum):
    MultiLineString = 'MultiLineString'


class MultilinestringGeoJSON(BaseModel):
    type: Type6
    coordinates: List[List[Coordinate]]


class Type7(Enum):
    MultiPoint = 'MultiPoint'


class MultipointGeoJSON(BaseModel):
    type: Type7
    coordinates: List[List[float]]


class NumberMatched(RootModel[conint(ge=0)]):
    root: conint(ge=0) = Field(
        ...,
        description='The number of features of the feature type that match the selection\nparameters like `bbox`.',
        examples=[127],
    )


class NumberReturned(RootModel[conint(ge=0)]):
    root: conint(ge=0) = Field(
        ...,
        description='The number of features in the feature collection.\n\nA server may omit this information in a response, if the information\nabout the number of features is not known or difficult to compute.\n\nIf the value is provided, the value shall be identical to the number\nof items in the "features" array.',
        examples=[10],
    )


class Type8(Enum):
    Point = 'Point'


class PointGeoJSON(BaseModel):
    type: Type8
    coordinates: List[float] = Field(..., min_length=2)


class Type9(Enum):
    Polygon = 'Polygon'


class PolygonGeoJSON(BaseModel):
    type: Type9
    coordinates: List[List[Coordinate]]


class TimeStamp(RootModel[AwareDatetime]):
    root: AwareDatetime = Field(
        ...,
        description='This property indicates the time and date when the response was generated.',
        examples=['2017-08-17T08:05:32Z'],
    )


class Type10(Enum):
    Feature = 'Feature'


class FeatureGeoJsonKommuner(BaseModel):
    type: Type10
    links: Optional[List[Link]] = None
    id: Optional[int] = Field(None, title='ID')
    geometry: MultipolygonGeoJSON
    properties: Properties


class Properties2(BaseModel):
    objektidentitet: Optional[str] = Field(None, title='Objektidenitet')
    objektversion: Optional[int] = Field(None, title='Objektversion')
    versionGiltigFran: Optional[AwareDatetime] = Field(
        None, title='Version giltig från'
    )
    versionGiltigTill: Optional[AwareDatetime] = Field(
        None, title='Version giltig till'
    )
    objekttyp: Optional[str] = Field(None, title='Objekttyp')
    enhetstyp: Optional[str] = Field(None, title='Enhetstyp')
    gransstatus: Optional[str] = Field(None, title='Gränsstatus')
    lanskod: Optional[str] = Field(None, title='Länskod')
    lansbokstav: Optional[str] = Field(None, title='Länsbokstav')
    landskod: Optional[str] = Field(None, title='Landskod')
    hogstaForvaltningsniva: Optional[str] = Field(None, title='Högsta förvaltningsnivå')
    beslutatNamn: Optional[str] = Field(None, title='Beslutat namn')
    namnKortform: Optional[str] = Field(None, title='Namn kortform')
    landareal_varde: Optional[int] = Field(None, title='Landarealvärde')
    landareal_enhet: Optional[str] = Field(None, title='Landarealenhet')
    vattenareal_varde: Optional[int] = Field(None, title='Vattenarealvärde')
    vattenareal_enhet: Optional[str] = Field(None, title='Vattenarealenhet')
    totalareal_varde: Optional[int] = Field(None, title='Totalarealvärde')
    totalareal_enhet: Optional[str] = Field(None, title='Totalarealenhet')
    referensdatumFran: Optional[date] = Field(None, title='Referensdatum från')
    referensdatumTill: Optional[date] = Field(None, title='Referensdatum till')


class FeatureGeoJsonLan2025(BaseModel):
    type: Type10
    links: Optional[List[Link]] = None
    id: Optional[int] = Field(None, title='ID')
    geometry: MultipolygonGeoJSON
    properties: Properties2


class FeatureGeoJsonLan(BaseModel):
    type: Type10
    links: Optional[List[Link]] = None
    id: Optional[int] = Field(None, title='ID')
    geometry: MultipolygonGeoJSON
    properties: Properties2


class Properties4(BaseModel):
    objektidentitet: Optional[str] = Field(None, title='Objektidentitet')
    objektversion: Optional[int] = Field(None, title='Objektversion')
    versionGiltigFran: Optional[AwareDatetime] = Field(
        None, title='Version giltig från'
    )
    versionGiltigTill: Optional[AwareDatetime] = Field(
        None, title='Version giltig till'
    )
    objekttyp: Optional[str] = Field(None, title='Objekttyp')
    enhetstyp: Optional[str] = Field(None, title='Enhetstyp')
    gransstatus: Optional[str] = Field(None, title='Gränsstatus')
    landskod: Optional[str] = Field(None, title='Landskod')
    nationellIdentifieringskod: Optional[str] = Field(
        None, title='Nationell identifieringskod'
    )
    hogstaForvaltningsniva: Optional[str] = Field(None, title='Högsta förvaltningsnivå')
    beslutatNamn: Optional[str] = Field(None, title='Beslutat namn')
    namnKortform: Optional[str] = Field(None, title='Namn kortform')
    landareal_varde: Optional[int] = Field(None, title='Landarealvärde')
    landareal_enhet: Optional[str] = Field(None, title='Landarealenhet')
    vattenareal_varde: Optional[int] = Field(None, title='Vattenarealvärde')
    vattenareal_enhet: Optional[str] = Field(None, title='Vattenarealenhet')
    totalareal_varde: Optional[int] = Field(None, title='Totalarealvärde')
    totalareal_enhet: Optional[str] = Field(None, title='Totalarealenhet')
    referensdatumFran: Optional[date] = Field(None, title='Referensdatum från')
    referensdatumTill: Optional[date] = Field(None, title='Referensdatum till')


class FeatureGeoJsonRike2025(BaseModel):
    type: Type10
    links: Optional[List[Link]] = None
    id: Optional[int] = Field(None, title='ID')
    geometry: MultipolygonGeoJSON
    properties: Properties4


class FeatureGeoJsonRike(BaseModel):
    type: Type10
    links: Optional[List[Link]] = None
    id: Optional[int] = Field(None, title='ID')
    geometry: MultipolygonGeoJSON
    properties: Properties4


class Type15(Enum):
    FeatureCollection = 'FeatureCollection'


class FeatureCollectionGeoJsonKommuner(BaseModel):
    type: Type15
    features: List[FeatureGeoJsonKommuner]
    links: Optional[List[Link]] = None
    timeStamp: Optional[TimeStamp] = None
    numberMatched: Optional[NumberMatched] = None
    numberReturned: Optional[NumberReturned] = None


class FeatureCollectionGeoJsonLan2025(BaseModel):
    type: Type15
    features: List[FeatureGeoJsonLan2025]
    links: Optional[List[Link]] = None
    timeStamp: Optional[TimeStamp] = None
    numberMatched: Optional[NumberMatched] = None
    numberReturned: Optional[NumberReturned] = None


class FeatureCollectionGeoJsonLan(BaseModel):
    type: Type15
    features: List[FeatureGeoJsonLan]
    links: Optional[List[Link]] = None
    timeStamp: Optional[TimeStamp] = None
    numberMatched: Optional[NumberMatched] = None
    numberReturned: Optional[NumberReturned] = None


class FeatureCollectionGeoJsonRike2025(BaseModel):
    type: Type15
    features: List[FeatureGeoJsonRike2025]
    links: Optional[List[Link]] = None
    timeStamp: Optional[TimeStamp] = None
    numberMatched: Optional[NumberMatched] = None
    numberReturned: Optional[NumberReturned] = None


class FeatureCollectionGeoJsonRike(BaseModel):
    type: Type15
    features: List[FeatureGeoJsonRike]
    links: Optional[List[Link]] = None
    timeStamp: Optional[TimeStamp] = None
    numberMatched: Optional[NumberMatched] = None
    numberReturned: Optional[NumberReturned] = None


class AnyObject(BaseModel):
    pass


class JsonSchema(BaseModel):
    pass


class InstantArrayArray(RootModel[List[InstantArray]]):
    root: List[InstantArray]


class SpatialExtent(BaseModel):
    crs: str
    bbox: DoubleArrayArray


class FeatureGeoJsonKommuner2025(BaseModel):
    type: Type
    links: Optional[List[Link]] = None
    id: Optional[int] = Field(None, title='ID')
    geometry: MultipolygonGeoJSON
    properties: Properties


class Collection1(BaseModel):
    id: str = Field(
        ...,
        description='identifier of the collection used, for example, in URIs',
        examples=['address'],
    )
    title: Optional[str] = Field(
        None, description='human readable title of the collection', examples=['address']
    )
    description: Optional[str] = Field(
        None,
        description='a description of the features in the collection',
        examples=['An address.'],
    )
    links: List[LinkModel] = Field(
        ...,
        examples=[
            [
                {'href': 'http://data.example.com/buildings', 'rel': 'item'},
                {
                    'href': 'http://example.com/concepts/buildings.html',
                    'rel': 'describedby',
                    'type': 'text/html',
                },
            ]
        ],
    )
    extent: Optional[Extent] = None
    itemType: Optional[str] = Field(
        'feature',
        description="indicator about the type of the items in the collection (the default value is 'feature').",
    )
    crs: Optional[List[str]] = Field(
        ['http://www.opengis.net/def/crs/OGC/1.3/CRS84'],
        description='the list of coordinate reference systems supported by the service',
        examples=[
            [
                'http://www.opengis.net/def/crs/OGC/1.3/CRS84',
                'http://www.opengis.net/def/crs/EPSG/0/4326',
            ]
        ],
    )


class Collections1(BaseModel):
    links: List[LinkModel]
    collections: List[Collection1]


class LandingPage1(BaseModel):
    title: Optional[str] = Field(None, examples=['Buildings in Bonn'])
    description: Optional[str] = Field(
        None,
        examples=[
            'Access to data about buildings in the city of Bonn via a Web API that conforms to the OGC API Features specification.'
        ],
    )
    links: List[LinkModel]


class FeatureCollectionGeoJsonKommuner2025(BaseModel):
    type: Type15
    features: List[FeatureGeoJsonKommuner2025]
    links: Optional[List[Link]] = None
    timeStamp: Optional[TimeStamp] = None
    numberMatched: Optional[NumberMatched] = None
    numberReturned: Optional[NumberReturned] = None


class TemporalExtent(BaseModel):
    interval: InstantArrayArray
    trs: str


class ExtentModel(BaseModel):
    temporal: Optional[TemporalExtent] = None
    spatial: Optional[SpatialExtent] = None


class Collection(BaseModel):
    extent: Optional[ExtentModel] = None
    storageCrs: Optional[str] = None
    storageCrsCoordinateEpoch: Optional[float] = None
    itemType: Optional[str] = None
    crs: Optional[List[str]] = None
    id: str
    description: Optional[str] = None
    title: Optional[str] = None
    links: List[Link]


class LandingPage(BaseModel):
    extent: Optional[ExtentModel] = None
    attribution: Optional[str] = None
    externalDocs: Optional[ExternalDocumentation] = None
    description: Optional[str] = None
    title: Optional[str] = None
    links: List[Link]


class Collections(BaseModel):
    crs: Optional[List[str]] = None
    collections: List[Collection]
    description: Optional[str] = None
    title: Optional[str] = None
    links: List[Link]


class FeatureCollectionGeoJSON(BaseModel):
    type: Type2
    features: List[FeatureGeoJSON]
    links: Optional[List[LinkModel]] = None
    timeStamp: Optional[TimeStamp] = None
    numberMatched: Optional[NumberMatched] = None
    numberReturned: Optional[NumberReturned] = None


class FeatureGeoJSON(BaseModel):
    type: Type3
    geometry: GeometryGeoJSON
    properties: Dict[str, Any]
    id: Optional[Union[str, int]] = None
    links: Optional[List[LinkModel]] = None


class GeometrycollectionGeoJSON(BaseModel):
    type: Type4
    geometries: List[GeometryGeoJSON]


class GeometryGeoJSON(
    RootModel[
        Union[
            PointGeoJSON,
            MultipointGeoJSON,
            LinestringGeoJSON,
            MultilinestringGeoJSON,
            PolygonGeoJSON,
            MultipolygonGeoJSON,
            GeometrycollectionGeoJSON,
        ]
    ]
):
    root: Union[
        PointGeoJSON,
        MultipointGeoJSON,
        LinestringGeoJSON,
        MultilinestringGeoJSON,
        PolygonGeoJSON,
        MultipolygonGeoJSON,
        GeometrycollectionGeoJSON,
    ]


FeatureCollectionGeoJSON.model_rebuild()
FeatureGeoJSON.model_rebuild()
GeometryGeoJSON.model_rebuild()
